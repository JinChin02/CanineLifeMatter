package com.example.CSIS4495.controllers;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.sql.Blob;
import java.util.Base64;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;


import com.example.CSIS4495.model.DogRepository;
import com.example.CSIS4495.model.User;
import com.example.CSIS4495.model.UserRepository;

@RestController
@CrossOrigin(origins= "http://localhost:4200/")
public class ImageProcessingController {

	@Autowired
	UserRepository userRepository; 
	
	@Autowired
	DogRepository dogRepository;
	
	
	 
	 //this is just for in case 
	@PostMapping("/uploadImage/user/{id}")
    public ResponseEntity<User> uploadImage(@PathVariable("id")long id, @RequestBody String imageUrl) throws IOException {
		Optional<User> user= userRepository.findById(id);
		if (user.isPresent()) {
			User thisUser= user.get();
			thisUser.setUserURL(imageUrl);
			userRepository.save(thisUser);
			return new ResponseEntity<User>(thisUser,HttpStatus.OK);
		} else
			
		
    }
	
	@PutMapping("/uploadImage/dog/{id}")
	 public ResponseEntity<User> uploadDogImage(@PathVariable("id")long id, @RequestBody MultipartFile file) throws IOException{
		Optional<User> userList= userRepository.findById(id);
		if (userList.isPresent()) {
			String fileName = StringUtils.cleanPath(file.getOriginalFilename());
			if (fileName.contains(".."))
				return new ResponseEntity<User>(HttpStatus.METHOD_NOT_ALLOWED);
			
			User thisUser= userList.get();
			thisUser.setUserImage(Base64.getEncoder().encodeToString(file.getBytes()));
			userRepository.save(thisUser);
			return new ResponseEntity<User>(thisUser,HttpStatus.OK);
		} else {
			return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
		}
	}
}
